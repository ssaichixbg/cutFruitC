/****************************************************/
/* VESA(1024*768*8bit) Graphics Library for TC 2.0  */
/* copyright (c) Black White, April 1, 2013.        */
/* email: iceman@zju.edu.cn                         */
/* This program is for teaching purpose only,       */
/* if you want to reference it, please keep         */
/* the above copyright information.                 */
/****************************************************/
#if 0
int  set_vesa_mode_1024x768x8bit(void);
int  display_8bit_bmp(char *filename);
void vesa_putpixel(int x, int y, byte color);
byte vesa_getpixel(int x, int y);
void vesa_line(int x1, int y1, int x2, int y2, byte color);
void vesa_putchar(int x, int y, byte color, char c);
void vesa_puts(int x, int y, byte color, char s[]);
#endif

#include <stdio.h>
#include <stdlib.h>
#include <bios.h>
#include <dos.h>
#include <mem.h>
#include <alloc.h>
typedef unsigned char byte;
typedef unsigned short int word;
typedef unsigned long int dword;
typedef struct
{
/* +000 */ char signature[4];
/* +004 */ word version;
/* +006 */ char far *oem_name_ptr;
/* +00A */ dword capability;
/* +00E */ word far *video_mode_ptr;
/* +012 */ word video_memory_blocks;
/* +014 */ word software_version;
/* +016 */ char far *vendor_name_ptr;
/* +01A */ char far *product_name;
/* +01E */ char far *product_revision;
/* +022 */ word vbe_version;
/* +024 */ word far *accelerated_video_mode_ptr;
/* +028 */ char reversed_for_vbe_implementation[0xD8];
/* +100 */ char oem_scratch_pad[0x100];
} VESA_INFO; /* total 0x200 bytes */

typedef struct
{
/* +00 */ word mode_attr;
/* +02 */ byte win_a_attr;
/* +03 */ byte win_b_attr;
/* +04 */ word win_granularity;
/* +06 */ word win_size;
/* +08 */ word win_a_seg;
/* +0A */ word win_b_seg;
/* +0C */ void (far *win_fun_ptr)(void);
/* +10 */ word bytes_per_line;
/* +12 */ word width_pixels;
/* +14 */ word height_pixels;
/* +16 */ byte char_width;
/* +17 */ byte char_height;
/* +18 */ byte planes;
/* +19 */ byte bits_per_pixel;
/* +1A */ byte banks;
/* +1B */ byte mem_model_type;
/* +1C */ byte bank_size;
/* +1D */ byte image_pages;
/* +1E */ byte zero_or_one;
/* +1F */ byte red_bits;
/* +20 */ byte red_bit_off;
/* +21 */ byte green_bits;
/* +22 */ byte green_bit_off;
/* +23 */ byte blue_bits;
/* +24 */ byte blue_bit_off;
/* +25 */ byte reserved_bits;
/* +26 */ byte reserved_bit_off;
/* +27 */ byte direct_color_mode_info;
/* +28 */ dword vbuf_phys_addr;
/* +2C */ dword off_screen_addr;
/* +30 */ word off_screen_mem_blocks;
/* +32 */ byte reserved[0xCE];
} MODE_INFO;

typedef struct
{
   byte blue;
   byte green;
   byte red;
   byte reserved;
} BMP_PALETTE;

void text(void); /* 切换显卡到文本模式 */
VESA_INFO * get_vesa_info(void);  /* 获取BIOS支持的VESA接口信息 */
int  get_mode_info(word mode, MODE_INFO far *mi); /* 获取mode模式号的VESA接口信息 */
int  set_vesa_mode(word mode); /* 切换显卡到VESA图像模式, 其中mode是模式号 */
int  set_vesa_mode_1024x768x8bit(void); /* 切换显卡到1024x768x256色VESA模式 */
void map_window(word win); /* 把内存地址A000:0000与显卡内存建立映射关系 */
                           /* 在1024*768*256色模式下, 每个点占用1个字节, 整个屏幕共
                              占用1024*768字节(超过A000:0000~A0000:FFFF对应的64K内存),
                              所以映射时需要分窗口, 每个窗口只能对应显卡中的部分内存,
                              其中win是窗口号.
                            */
int  map_window_by_interrupt(word win); /* 用中断方式映射显卡内存, 速度较慢 */
void vesa_putpixel(int x, int y, byte color); /* 画点 */
byte vesa_getpixel(int x, int y); /* 读点 */
void vesa_line(int x1, int y1, int x2, int y2, byte color); /* 画直线 */
void set_bmp_palette(BMP_PALETTE *palette); /* 用bmp图片文件中包含的调色板信息
                                               设置显卡调色板 */
int  display_8bit_bmp(char *filename); /* 显示256色bmp文件 */
void vesa_putchar(int x, int y, byte color, char c); /* 在(x,y)坐标上以color色显示c字符 */
void vesa_puts(int x, int y, byte color, char s[]); /* 在(x,y)坐标上以color色显示s字符串 */
byte far *vp;   /* pointer to video buffer */
void (far * map_win_fun)(void); /* 用于建立内存与显卡内存映射的函数 */
dword win_bytes; /* total bytes occupied by 1 video window */
                 /* win_bytes = mi->win_size * 0x400L */
extern byte ascfont[256][16];

void vesa_putchar(int x, int y, byte color, char c)
{
   int row, col, i, j;
   for(i=0; i < 16; i++)
   {
      for(j=0; j < 8; j++)
      {
	 if(ascfont[c][i] & (1<<(7-j)))
	    vesa_putpixel(x+j, y+i, color);
      }
   }
}

void vesa_puts(int x, int y, byte color, char s[])
{
   int i=0;
   while(s[i] != '\0')
   {
      vesa_putchar(x, y, color, s[i]);
      x += 8;
      i++;
   }
}

void vesa_putpixel(int x, int y, byte color)
{
   word win, offset;
   win = (y*1024L+x) / win_bytes;
   offset = (y*1024L+x) % win_bytes;
   map_window(win);
   *(vp + offset) = color;
}

void vesa_line(int x1, int y1, int x2, int y2, byte color)
{  /* Bresenham Algorithm */
   byte buf[1024];
   word win, offset;
   int x, y, dx, dy;
   int cnt, err, yoff;
   if(y1 == y2) /* horizontal line */
   {
      if(x1 > x2)
      {
         x = x1;
         x1 = x2;
         x2 = x;
      }
      dx = x2 - x1;
      memset(buf, color, sizeof(buf)); /* fill a line with the specified color */
      win = (y1*1024L+x1) / win_bytes;
      offset = (y1*1024L+x1) % win_bytes;
      if(offset + dx <= win_bytes)
      {    /* if this line is within one window */
         map_window(win);
         movedata((dword)(void far *)buf >> 16,
                  (dword)(void far *)buf & 0xFFFF,
                  (dword)(vp+offset) >> 16,
                  (dword)(vp+offset) & 0xFFFF,
                  dx);
      }
      else /* if this line overrides two windows */
      {
         dword bytes_in_win, bytes_left;
         bytes_in_win = win_bytes - offset;
         map_window(win);
         movedata((dword)(byte far *)buf >> 16,
                  (dword)(byte far *)buf & 0xFFFF,
                  (dword)(vp+offset) >> 16,
                  (dword)(vp+offset) & 0xFFFF,
                  bytes_in_win);
         bytes_left = dx - bytes_in_win;
         map_window(win+1);
         movedata((dword)((byte far *)buf+bytes_in_win) >> 16,
                  (dword)((byte far *)buf+bytes_in_win) & 0xFFFF,
                  (dword)vp >> 16,
                  (dword)vp & 0xFFFF,
                  bytes_left);
      }
      return;
   }
   dx = x2 - x1;
   dy = y2 - y1;
   x = x1;
   y = y1;
   yoff = 1;
   if(dx < 0)
   {
      x += dx; dx = -dx;
      y += dy; dy = -dy;
   }
   if(dy < 0)
   {
       yoff = -1;
       dy   = -dy;
   }
   if(dx == 0) /* vertical line */
   {
      cnt = dy;
      do
      {
         vesa_putpixel(x, y, color);
         y += yoff;
      } while(--cnt >= 0);
      return;
   }
   if(dy == 0) /* horizontal line */
   {
      cnt = dx;
      do
      {
         vesa_putpixel(x, y, color);
         x++;
      } while(--cnt >= 0);
      return;
   }
   if(dx > dy)
   {
      err = (cnt = dx) >> 1;
      do
      {
         vesa_putpixel(x, y, color);
         if((err -= dy) < 0)
         {
            err += dx;
            y += yoff;
         }
         x++;
      } while(--cnt >= 0);
   }
   else /* dy > dx */
   {
      err = (cnt = dy) >> 1;
      do
      {
         vesa_putpixel(x, y, color);
         if((err -= dx) < 0)
         {
            err += dy;
            x++;
         }
         y += yoff;
      } while(--cnt >= 0);
   }
}

byte vesa_getpixel(int x, int y)
{
   word win, offset;
   win = (y*1024L+x) / win_bytes;
   offset = (y*1024L+x) % win_bytes;
   map_window(win);
   return *(vp + offset);
}

void text(void)
{
   _AX=0x0003;
   geninterrupt(0x10);
}

VESA_INFO * get_vesa_info(void)
{
   VESA_INFO *p;
   struct REGPACK r;
   p = calloc(sizeof(VESA_INFO),1);
   if(p == NULL)
      return NULL;
   memset(&r, 0, sizeof(r));
   r.r_ax = 0x4F00;
   r.r_di = (dword)(void far *)p & 0xFFFF;
   r.r_es = (dword)(void far *)p >> 16;
   intr(0x10, &r);
   if((r.r_ax & 0xFF) != 0x4F)
   {
      free(p);
      p = NULL;
   }
   return p;
}

int get_mode_info(word mode, MODE_INFO far *mi)
{
   struct REGPACK r;
   r.r_ax = 0x4F01;
   r.r_cx = mode;
   r.r_di = (dword)mi & 0xFFFF;
   r.r_es = (dword)mi >> 16;
   intr(0x10, &r);
   return (r.r_ax & 0xFF) == 0x4F;
}

int set_vesa_mode(word mode)
{
   struct REGPACK r;
   r.r_ax = 0x4F02;
   r.r_bx = mode;
   intr(0x10, &r);
   return (r.r_ax & 0xFF) == 0x4F;
}

int map_window_by_interrupt(word win)
{ /* this function is slower than map_window() */
   struct REGPACK r;
   r.r_ax = 0x4F05;
   r.r_bx = 0;    /* set window=0; window A=0; */
   r.r_dx = win;
   intr(0x10, &r);
   return (r.r_ax & 0xFF) == 0x4F;
}

void map_window(word win)
{
   word old_bx;
   old_bx = _BX;
   _BX = 0;
   _DX = win;
   (*map_win_fun)();
   _BX = old_bx;
}

void set_bmp_palette(BMP_PALETTE *palette)
{
   int i;
   for(i=0; i<256; i++)
   {
      outportb(0x3C8, i);
      outportb(0x3C9, palette[i].red >> 2);
      outportb(0x3C9, palette[i].green >> 2);
      outportb(0x3C9, palette[i].blue >> 2);
   }
}

int set_vesa_mode_1024x768x8bit(void)
{
   int set_vesa_mode_result = 0;
   VESA_INFO *vi = NULL;
   MODE_INFO *mi = NULL;
   word mode, far *pmode;
   vi = get_vesa_info();
   if(vi == NULL)
   {
      puts("VESA is not supported by BIOS.");
      goto set_vesa_mode_error;
   }
   printf("VESA version is %d.%d\n", vi->version >> 8, vi->version & 0xFF);
   mi = calloc(sizeof(MODE_INFO),1);
   if(mi == NULL)
   {
      puts("Cannot allocate memory for mode info.");
      goto set_vesa_mode_error;
   }
   pmode = vi->video_mode_ptr;
   while(*pmode != 0xFFFF)    /* goto the end of mode list */
      pmode++;
   while(--pmode >= vi->video_mode_ptr) /* search backward */
   {                                    /* for mode 1024x768x8bit */
      if(!get_mode_info(*pmode, mi))
         continue;
      if((mi->mode_attr & 0x99) != 0x99)
         continue;
      if(mi->width_pixels != 1024 || mi->height_pixels != 768 ||
         mi->bits_per_pixel != 8)
         continue;
      break;
   }
   if(pmode < vi->video_mode_ptr) /* search failed */
   {
      puts("1024 x 768 x 8bit mode is not supported!");
      goto set_vesa_mode_error;
   }
   mode = *pmode;
   if(!set_vesa_mode(mode))
   {
      puts("Cannot switch to 1024 x 768 x 8bit mode!");
      goto set_vesa_mode_error;
   }
   map_win_fun = mi->win_fun_ptr;
   vp = (byte far *)((dword)mi->win_a_seg << 16);
   win_bytes = mi->win_size * 0x400L;  /* win_size's unit is Kilobyte */
   set_vesa_mode_result = 1;
   goto set_vesa_mode_done;
set_vesa_mode_error:
   set_vesa_mode_result = 0;
set_vesa_mode_done:
   if(vi != NULL) free(vi);
   if(mi != NULL) free(mi);
   return set_vesa_mode_result;
}

int display_8bit_bmp(char *filename)
{
   int display_8bit_bmp_result = 0;
   FILE *fp = NULL;
   word win, offset;
   dword width, height, bmp_data_offset, bytes_per_line;
   int i, j;
   BMP_PALETTE *palette = NULL; /* pointer to palette definition */
   byte *p = NULL; /* pointer to a line of bmp data */

   palette = malloc(sizeof(BMP_PALETTE) * 256); /* memory for holding 4*256 bytes
                                                   palette definition */
   p = malloc(1024);  /* memory for holding a line of bmp data */
   fp = fopen(filename, "rb");
   if(fp == NULL)
   {
      puts("Cannot open bmp file!");
      goto display_8bit_bmp_error;
   }
   fread(p, 1, 0x36, fp);     /* read BMP head */
   if(*(word *)p != 0x4D42)   /* check BMP signature */
   {
      puts("Not a BMP file!");
      goto display_8bit_bmp_error;
   }
   if(*(word *)(p+0x1C) != 8)
   {
      puts("Not a 8-bit-color BMP file!");
      goto display_8bit_bmp_error;
   }
   width = *(dword *)(p+0x12);
   height = *(dword *)(p+0x16);
   bmp_data_offset = *(dword *)(p+0x0A);
   fseek(fp, 0x36, SEEK_SET); /* seek to palette definition */
   fread(palette, sizeof(BMP_PALETTE), 256, fp);
   fseek(fp, bmp_data_offset, SEEK_SET); /* skip to bmp data */
   bytes_per_line = (width + 3) / 4 * 4; /* must be multiple of 4 */
   set_bmp_palette(palette);
   for(i=height-1; i>=0; i--)          /* draw from bottom to top */
   {
      fread(p, 1, bytes_per_line, fp); /* read a line of bmp data */
      /* compute which window this line resides in */
      win = (i*1024L) / win_bytes;
      offset = (i*1024L) % win_bytes;
      if(offset + width <= win_bytes)
      {    /* if this line is within one window */
         map_window(win);
         movedata((dword)(void far *)p >> 16,
                  (dword)(void far *)p & 0xFFFF,
                  (dword)(vp+offset) >> 16,
                  (dword)(vp+offset) & 0xFFFF,
                  width);
      }
      else /* if this line overrides two windows */
      {
         dword bytes_in_win, bytes_left;
         bytes_in_win = win_bytes - offset;
         map_window(win);
         movedata((dword)(byte far *)p >> 16,
                  (dword)(byte far *)p & 0xFFFF,
                  (dword)(vp+offset) >> 16,
                  (dword)(vp+offset) & 0xFFFF,
                  bytes_in_win);
         bytes_left = width - bytes_in_win;
         map_window(win+1);
         movedata((dword)((byte far *)p+bytes_in_win) >> 16,
                  (dword)((byte far *)p+bytes_in_win) & 0xFFFF,
                  (dword)vp >> 16,
                  (dword)vp & 0xFFFF,
                  bytes_left);
      }
   }
   display_8bit_bmp_result = 1;
   goto display_8bit_bmp_done;
display_8bit_bmp_error:
   display_8bit_bmp_result = 0;
display_8bit_bmp_done:
   if(p != NULL)
      free(p);
   if(palette != NULL)
      free(palette);
   if(fp != NULL)
      fclose(fp);
   return display_8bit_bmp_result;
}

byte ascfont[256][16]={ /* 8*16点阵ASCII字库, 每个字符占用16字节 */
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x7E,0x81,0xA5,0x81,0x81,0xBD,
   0x99,0x81,0x81,0x7E,0x00,0x00,0x00,0x00,
   0x00,0x00,0x7C,0xFE,0xFE,0xD6,0xFE,0xFE,
   0xBA,0xC6,0xFE,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x6C,0xEE,0xFE,0xFE,0xFE,
   0xFE,0x7C,0x38,0x10,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x10,0x38,0x7C,0xFE,0x7C,
   0x38,0x10,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x10,0x38,0x38,0x10,0x6C,
   0xEE,0x6C,0x10,0x38,0x00,0x00,0x00,0x00,
   0x00,0x00,0x10,0x38,0x7C,0x7C,0xFE,0xFE,
   0xFE,0x6C,0x10,0x38,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x18,0x3C,0x3C,
   0x3C,0x18,0x00,0x00,0x00,0x00,0x00,0x00,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xE7,0xC3,0xC3,
   0xC3,0xE7,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0x00,0x00,0x00,0x00,0x18,0x3C,0x66,0x66,
   0x66,0x3C,0x18,0x00,0x00,0x00,0x00,0x00,
   0xFF,0xFF,0xFF,0xFF,0xE7,0xC3,0x99,0x99,
   0x99,0xC3,0xE7,0xFF,0xFF,0xFF,0xFF,0xFF,
   0x00,0x00,0x1E,0x0E,0x1E,0x36,0x78,0xCC,
   0xCC,0xCC,0xCC,0x78,0x00,0x00,0x00,0x00,
   0x00,0x00,0x3C,0x66,0x66,0x66,0x3C,0x18,
   0x7E,0x18,0x18,0x18,0x00,0x00,0x00,0x00,
   0x00,0x00,0x1E,0x1A,0x1E,0x18,0x18,0x18,
   0x18,0x78,0xF8,0x70,0x00,0x00,0x00,0x00,
   0x00,0x00,0x3E,0x36,0x3E,0x36,0x36,0x76,
   0xF6,0x66,0x0E,0x1E,0x0C,0x00,0x00,0x00,
   0x00,0x00,0x18,0xDB,0x7E,0x3C,0x66,0x66,
   0x3C,0x7E,0xDB,0x18,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x80,0xE0,0xF0,0xFC,0xFE,
   0xFC,0xF0,0xE0,0x80,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x02,0x0E,0x3E,0x7E,0xFE,
   0x7E,0x3E,0x0E,0x02,0x00,0x00,0x00,0x00,
   0x00,0x00,0x18,0x3C,0x7E,0x18,0x18,0x18,
   0x18,0x7E,0x3C,0x18,0x00,0x00,0x00,0x00,
   0x00,0x00,0x66,0x66,0x66,0x66,0x66,0x66,
   0x66,0x00,0x66,0x66,0x00,0x00,0x00,0x00,
   0x00,0x00,0x7F,0xDB,0xDB,0xDB,0xDB,0x7B,
   0x1B,0x1B,0x1B,0x1B,0x00,0x00,0x00,0x00,
   0x00,0x00,0x7C,0xC6,0xC6,0x60,0x7C,0xF6,
   0xDE,0x7C,0x0C,0xC6,0xC6,0x7C,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0xFE,0xFE,0xFE,0xFE,0x00,0x00,0x00,0x00,
   0x00,0x00,0x18,0x3C,0x7E,0x18,0x18,0x18,
   0x7E,0x3C,0x18,0x7E,0x00,0x00,0x00,0x00,
   0x00,0x00,0x18,0x3C,0x7E,0x18,0x18,0x18,
   0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00,
   0x00,0x00,0x18,0x18,0x18,0x18,0x18,0x18,
   0x18,0x7E,0x3C,0x18,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x0C,0x0E,0xFF,
   0x0E,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x30,0x70,0xFE,
   0x70,0x30,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xC0,
   0xC0,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x24,0x66,0xFF,
   0x66,0x24,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x10,0x38,0x38,0x38,0x7C,
   0x7C,0xFE,0xFE,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0xFE,0xFE,0x7C,0x7C,0x7C,
   0x38,0x38,0x10,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x18,0x3C,0x3C,0x3C,0x3C,0x18,
   0x18,0x00,0x18,0x18,0x00,0x00,0x00,0x00,
   0x00,0x36,0x36,0x36,0x36,0x14,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x6C,0x6C,0x6C,0xFE,0x6C,0x6C,
   0xFE,0x6C,0x6C,0x6C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x18,0x18,0x7C,0xC6,0xC0,0x78,
   0x3C,0x06,0xC6,0x7C,0x18,0x18,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x62,0x66,0x0C,
   0x18,0x30,0x66,0xC6,0x00,0x00,0x00,0x00,
   0x00,0x00,0x38,0x6C,0x38,0x30,0x76,0x7E,
   0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00,
   0x00,0x0C,0x0C,0x0C,0x18,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x0C,0x18,0x30,0x30,0x30,0x30,
   0x30,0x30,0x18,0x0C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x30,0x18,0x0C,0x0C,0x0C,0x0C,
   0x0C,0x0C,0x18,0x30,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x6C,0x38,0xFE,
   0x38,0x6C,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x7E,
   0x18,0x18,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x0C,0x0C,0x0C,0x18,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x02,0x06,0x0C,0x18,
   0x30,0x60,0xC0,0x80,0x00,0x00,0x00,0x00,
   0x00,0x00,0x7C,0xC6,0xC6,0xCE,0xDE,0xF6,
   0xE6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x18,0x78,0x18,0x18,0x18,0x18,
   0x18,0x18,0x18,0x7E,0x00,0x00,0x00,0x00,
   0x00,0x00,0x7C,0xC6,0xC6,0x06,0x0C,0x18,
   0x30,0x60,0xC6,0xFE,0x00,0x00,0x00,0x00,
   0x00,0x00,0x7C,0xC6,0x06,0x06,0x3C,0x06,
   0x06,0x06,0xC6,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x0C,0x1C,0x3C,0x6C,0xCC,0xCC,
   0xFE,0x0C,0x0C,0x1E,0x00,0x00,0x00,0x00,
   0x00,0x00,0xFE,0xC0,0xC0,0xC0,0xFC,0x06,
   0x06,0x06,0xC6,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x7C,0xC6,0xC0,0xC0,0xFC,0xC6,
   0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x00,0xFE,0xC6,0x06,0x0C,0x18,0x30,
   0x30,0x30,0x30,0x30,0x00,0x00,0x00,0x00,
   0x00,0x00,0x7C,0xC6,0xC6,0xC6,0x7C,0xC6,
   0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x7C,0xC6,0xC6,0xC6,0xC6,0x7E,
   0x06,0x06,0xC6,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x0C,0x0C,0x00,
   0x00,0x0C,0x0C,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x0C,0x0C,0x00,
   0x00,0x0C,0x0C,0x0C,0x18,0x00,0x00,0x00,
   0x00,0x00,0x00,0x0C,0x18,0x30,0x60,0xC0,
   0x60,0x30,0x18,0x0C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x00,
   0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x60,0x30,0x18,0x0C,0x06,
   0x0C,0x18,0x30,0x60,0x00,0x00,0x00,0x00,
   0x00,0x00,0x7C,0xC6,0xC6,0x0C,0x18,0x18,
   0x18,0x00,0x18,0x18,0x00,0x00,0x00,0x00,
   0x00,0x00,0x7C,0xC6,0xC6,0xC6,0xDE,0xDE,
   0xDE,0xDC,0xC0,0x7E,0x00,0x00,0x00,0x00,
   0x00,0x00,0x38,0x6C,0xC6,0xC6,0xC6,0xFE,
   0xC6,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00,
   0x00,0x00,0xFC,0x66,0x66,0x66,0x7C,0x66,
   0x66,0x66,0x66,0xFC,0x00,0x00,0x00,0x00,
   0x00,0x00,0x3C,0x66,0xC2,0xC0,0xC0,0xC0,
   0xC0,0xC2,0x66,0x3C,0x00,0x00,0x00,0x00,
   0x00,0x00,0xF8,0x6C,0x66,0x66,0x66,0x66,
   0x66,0x66,0x6C,0xF8,0x00,0x00,0x00,0x00,
   0x00,0x00,0xFE,0x66,0x60,0x64,0x7C,0x64,
   0x60,0x60,0x66,0xFE,0x00,0x00,0x00,0x00,
   0x00,0x00,0xFE,0x66,0x60,0x64,0x7C,0x64,
   0x60,0x60,0x60,0xF0,0x00,0x00,0x00,0x00,
   0x00,0x00,0x7C,0xC6,0xC6,0xC0,0xC0,0xC0,
   0xCE,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x00,0xC6,0xC6,0xC6,0xC6,0xFE,0xC6,
   0xC6,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00,
   0x00,0x00,0x3C,0x18,0x18,0x18,0x18,0x18,
   0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x3C,0x18,0x18,0x18,0x18,0x18,
   0x18,0xD8,0xD8,0x70,0x00,0x00,0x00,0x00,
   0x00,0x00,0xC6,0xC6,0xCC,0xD8,0xF0,0xF0,
   0xD8,0xCC,0xC6,0xC6,0x00,0x00,0x00,0x00,
   0x00,0x00,0xF0,0x60,0x60,0x60,0x60,0x60,
   0x60,0x62,0x66,0xFE,0x00,0x00,0x00,0x00,
   0x00,0x00,0xC6,0xC6,0xEE,0xEE,0xFE,0xD6,
   0xD6,0xD6,0xC6,0xC6,0x00,0x00,0x00,0x00,
   0x00,0x00,0xC6,0xC6,0xE6,0xE6,0xF6,0xDE,
   0xCE,0xCE,0xC6,0xC6,0x00,0x00,0x00,0x00,
   0x00,0x00,0x7C,0xC6,0xC6,0xC6,0xC6,0xC6,
   0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x00,0xFC,0x66,0x66,0x66,0x66,0x7C,
   0x60,0x60,0x60,0xF0,0x00,0x00,0x00,0x00,
   0x00,0x00,0x7C,0xC6,0xC6,0xC6,0xC6,0xC6,
   0xC6,0xD6,0xD6,0x7C,0x06,0x00,0x00,0x00,
   0x00,0x00,0xFC,0x66,0x66,0x66,0x7C,0x78,
   0x6C,0x66,0x66,0xE6,0x00,0x00,0x00,0x00,
   0x00,0x00,0x7C,0xC6,0xC0,0xC0,0x70,0x1C,
   0x06,0x06,0xC6,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x7E,0x5A,0x18,0x18,0x18,0x18,
   0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,
   0x00,0x00,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,
   0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x00,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,
   0xC6,0x6C,0x38,0x10,0x00,0x00,0x00,0x00,
   0x00,0x00,0xC6,0xC6,0xC6,0xD6,0xD6,0xD6,
   0xFE,0xEE,0xC6,0xC6,0x00,0x00,0x00,0x00,
   0x00,0x00,0xC6,0xC6,0xC6,0x6C,0x38,0x38,
   0x6C,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00,
   0x00,0x00,0x66,0x66,0x66,0x66,0x66,0x3C,
   0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,
   0x00,0x00,0xFE,0xC6,0x86,0x0C,0x18,0x30,
   0x60,0xC2,0xC6,0xFE,0x00,0x00,0x00,0x00,
   0x00,0x00,0x7C,0x60,0x60,0x60,0x60,0x60,
   0x60,0x60,0x60,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x80,0xC0,0x60,0x30,
   0x18,0x0C,0x06,0x02,0x00,0x00,0x00,0x00,
   0x00,0x00,0x7C,0x0C,0x0C,0x0C,0x0C,0x0C,
   0x0C,0x0C,0x0C,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x10,0x38,0x6C,0xC6,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,
   0x00,0x18,0x18,0x18,0x0C,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x78,0x0C,0x7C,
   0xCC,0xCC,0xDC,0x76,0x00,0x00,0x00,0x00,
   0x00,0x00,0xE0,0x60,0x60,0x7C,0x66,0x66,
   0x66,0x66,0x66,0xFC,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x7C,0xC6,0xC0,
   0xC0,0xC0,0xC6,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x1C,0x0C,0x0C,0x7C,0xCC,0xCC,
   0xCC,0xCC,0xCC,0x7E,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x7C,0xC6,0xC6,
   0xFE,0xC0,0xC6,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x1C,0x36,0x30,0x30,0xFC,0x30,
   0x30,0x30,0x30,0x78,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x76,0xCE,0xC6,
   0xC6,0xCE,0x76,0x06,0xC6,0x7C,0x00,0x00,
   0x00,0x00,0xE0,0x60,0x60,0x7C,0x66,0x66,
   0x66,0x66,0x66,0xE6,0x00,0x00,0x00,0x00,
   0x00,0x00,0x18,0x18,0x00,0x38,0x18,0x18,
   0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x0C,0x0C,0x00,0x1C,0x0C,0x0C,
   0x0C,0x0C,0x0C,0xCC,0xCC,0x78,0x00,0x00,
   0x00,0x00,0xE0,0x60,0x60,0x66,0x66,0x6C,
   0x78,0x6C,0x66,0xE6,0x00,0x00,0x00,0x00,
   0x00,0x00,0x18,0x18,0x18,0x18,0x18,0x18,
   0x18,0x18,0x18,0x1C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x6C,0xFE,0xD6,
   0xD6,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0xDC,0x66,0x66,
   0x66,0x66,0x66,0x66,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x7C,0xC6,0xC6,
   0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0xDC,0x66,0x66,
   0x66,0x66,0x7C,0x60,0x60,0xF0,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x76,0xCC,0xCC,
   0xCC,0xCC,0x7C,0x0C,0x0C,0x1E,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0xDC,0x66,0x60,
   0x60,0x60,0x60,0xF0,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x7C,0xC6,0xC0,
   0x7C,0x06,0xC6,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x30,0x30,0x30,0xFC,0x30,0x30,
   0x30,0x30,0x36,0x1C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0xCC,0xCC,0xCC,
   0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0xC6,0xC6,0xC6,
   0xC6,0x6C,0x38,0x10,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0xC6,0xC6,0xD6,
   0xD6,0xD6,0xFE,0x6C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0xC6,0xC6,0x6C,
   0x38,0x6C,0xC6,0xC6,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0xC6,0xC6,0xC6,
   0xC6,0xCE,0x76,0x06,0xC6,0x7C,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0xFE,0x86,0x0C,
   0x18,0x30,0x62,0xFE,0x00,0x00,0x00,0x00,
   0x00,0x00,0x0E,0x18,0x18,0x18,0x70,0x18,
   0x18,0x18,0x18,0x0E,0x00,0x00,0x00,0x00,
   0x00,0x00,0x18,0x18,0x18,0x18,0x00,0x18,
   0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00,
   0x00,0x00,0x70,0x18,0x18,0x18,0x0E,0x18,
   0x18,0x18,0x18,0x70,0x00,0x00,0x00,0x00,
   0x00,0x00,0x76,0xDC,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x10,0x38,0x38,
   0x6C,0x6C,0xFE,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x3C,0x66,0xC0,0xC0,0xC0,0xC6,
   0x66,0x3C,0x18,0x0C,0xCC,0x38,0x00,0x00,
   0x00,0x00,0xC6,0x00,0x00,0xC6,0xC6,0xC6,
   0xC6,0xC6,0xCE,0x76,0x00,0x00,0x00,0x00,
   0x00,0x0C,0x18,0x30,0x00,0x7C,0xC6,0xC6,
   0xFE,0xC0,0xC6,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x30,0x78,0xCC,0x00,0x78,0x0C,0x7C,
   0xCC,0xCC,0xDC,0x76,0x00,0x00,0x00,0x00,
   0x00,0x00,0xCC,0x00,0x00,0x78,0x0C,0x7C,
   0xCC,0xCC,0xDC,0x76,0x00,0x00,0x00,0x00,
   0x00,0x60,0x30,0x18,0x00,0x78,0x0C,0x7C,
   0xCC,0xCC,0xDC,0x76,0x00,0x00,0x00,0x00,
   0x00,0x38,0x6C,0x38,0x00,0x78,0x0C,0x7C,
   0xCC,0xCC,0xDC,0x76,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x7C,0xC6,0xC0,0xC0,
   0xC6,0x7C,0x18,0x0C,0x6C,0x38,0x00,0x00,
   0x00,0x30,0x78,0xCC,0x00,0x7C,0xC6,0xC6,
   0xFE,0xC0,0xC6,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x00,0xCC,0x00,0x00,0x7C,0xC6,0xC6,
   0xFE,0xC0,0xC6,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x30,0x18,0x0C,0x00,0x7C,0xC6,0xC6,
   0xFE,0xC0,0xC6,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x66,0x00,0x00,0x38,0x18,0x18,
   0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,
   0x00,0x18,0x3C,0x66,0x00,0x38,0x18,0x18,
   0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x38,0x18,0x18,
   0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,
   0x00,0xC6,0x00,0x38,0x6C,0xC6,0xC6,0xC6,
   0xFE,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00,
   0x38,0x6C,0x38,0x00,0x38,0x6C,0xC6,0xC6,
   0xFE,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00,
   0x0C,0x18,0x30,0x00,0xFE,0x60,0x60,0x7C,
   0x60,0x60,0x60,0xFE,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x66,0xDB,0x1B,0x7F,
   0xD8,0xD8,0xDF,0x76,0x00,0x00,0x00,0x00,
   0x00,0x00,0x7E,0xD8,0xD8,0xD8,0xD8,0xFE,
   0xD8,0xD8,0xD8,0xDE,0x00,0x00,0x00,0x00,
   0x00,0x30,0x78,0xCC,0x00,0x7C,0xC6,0xC6,
   0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x00,0xC6,0x00,0x00,0x7C,0xC6,0xC6,
   0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x30,0x18,0x0C,0x00,0x7C,0xC6,0xC6,
   0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x30,0x78,0xCC,0x00,0xC6,0xC6,0xC6,
   0xC6,0xC6,0xCE,0x76,0x00,0x00,0x00,0x00,
   0x00,0x60,0x30,0x18,0x00,0xC6,0xC6,0xC6,
   0xC6,0xC6,0xCE,0x76,0x00,0x00,0x00,0x00,
   0x00,0x18,0x00,0x3C,0x18,0x18,0x18,0x18,
   0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,
   0x00,0xC6,0x00,0x7C,0xC6,0xC6,0xC6,0xC6,
   0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,
   0x00,0xC6,0x00,0xC6,0xC6,0xC6,0xC6,0xC6,
   0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x18,0x18,0x7C,0xC6,0xC0,0xC0,
   0xC6,0x7C,0x18,0x18,0x00,0x00,0x00,0x00,
   0x00,0x38,0x6C,0x60,0x60,0xF0,0x60,0x60,
   0x60,0x66,0xF6,0x6C,0x00,0x00,0x00,0x00,
   0x00,0x66,0x66,0x66,0x66,0x3C,0x18,0x7E,
   0x18,0x3C,0x18,0x18,0x00,0x00,0x00,0x00,
   0x00,0x00,0x3E,0x63,0x63,0x30,0x1C,0x06,
   0x63,0x63,0x3E,0x00,0x1C,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x3E,0x63,0x38,
   0x0E,0x63,0x3E,0x00,0x1C,0x00,0x00,0x00,
   0x00,0x0C,0x18,0x30,0x00,0x78,0x0C,0x7C,
   0xCC,0xCC,0xDC,0x76,0x00,0x00,0x00,0x00,
   0x00,0x0C,0x18,0x30,0x00,0x38,0x18,0x18,
   0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,
   0x00,0x0C,0x18,0x30,0x00,0x7C,0xC6,0xC6,
   0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x18,0x30,0x60,0x00,0xCC,0xCC,0xCC,
   0xCC,0xCC,0xDC,0x76,0x00,0x00,0x00,0x00,
   0x00,0x00,0x76,0xDC,0x00,0xBC,0x66,0x66,
   0x66,0x66,0x66,0xE6,0x00,0x00,0x00,0x00,
   0x00,0x76,0xDC,0x00,0xC6,0xC6,0xE6,0xF6,
   0xDE,0xCE,0xC6,0xC6,0x00,0x00,0x00,0x00,
   0x00,0x21,0x1E,0x00,0x1E,0x33,0x60,0x60,
   0x67,0x63,0x33,0x1D,0x00,0x00,0x00,0x00,
   0x00,0x42,0x3C,0x00,0x3B,0x66,0x66,0x66,
   0x3E,0x06,0x66,0x3C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x30,0x30,0x00,0x30,0x30,0x30,
   0x60,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,
   0x60,0x60,0x60,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,
   0x06,0x06,0x06,0x00,0x00,0x00,0x00,0x00,
   0x00,0x60,0x60,0x62,0x66,0x6C,0x18,0x30,
   0x60,0xDC,0x36,0x0C,0x18,0x3E,0x00,0x00,
   0x00,0x60,0x60,0x62,0x66,0x6C,0x18,0x36,
   0x6E,0xDE,0x36,0x7E,0x06,0x06,0x00,0x00,
   0x00,0x00,0x18,0x18,0x00,0x18,0x18,0x3C,
   0x3C,0x3C,0x3C,0x18,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x36,0x6C,0xD8,
   0x6C,0x36,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0xD8,0x6C,0x36,
   0x6C,0xD8,0x00,0x00,0x00,0x00,0x00,0x00,
   0x11,0x44,0x11,0x44,0x11,0x44,0x11,0x44,
   0x11,0x44,0x11,0x44,0x11,0x44,0x11,0x44,
   0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55,
   0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55,
   0xDD,0x77,0xDD,0x77,0xDD,0x77,0xDD,0x77,
   0xDD,0x77,0xDD,0x77,0xDD,0x77,0xDD,0x77,
   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,
   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,
   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xF8,
   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,
   0x18,0x18,0x18,0x18,0x18,0xF8,0x18,0xF8,
   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,
   0x36,0x36,0x36,0x36,0x36,0x36,0x36,0xF6,
   0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,
   0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,
   0x00,0x00,0x00,0x00,0x00,0xF8,0x18,0xF8,
   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,
   0x36,0x36,0x36,0x36,0x36,0xF6,0x06,0xF6,
   0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,
   0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,
   0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,
   0x00,0x00,0x00,0x00,0x00,0xFE,0x06,0xF6,
   0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,
   0x36,0x36,0x36,0x36,0x36,0xF6,0x06,0xFE,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x36,0x36,0x36,0x36,0x36,0x36,0x36,0xFE,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x18,0x18,0x18,0x18,0x18,0xF8,0x18,0xF8,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,
   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,
   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x1F,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xFF,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,
   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x1F,
   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xFF,
   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,
   0x18,0x18,0x18,0x18,0x18,0x1F,0x18,0x1F,
   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,
   0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x37,
   0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,
   0x36,0x36,0x36,0x36,0x36,0x37,0x30,0x3F,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x3F,0x30,0x37,
   0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,
   0x36,0x36,0x36,0x36,0x36,0xF7,0x00,0xFF,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0xF7,
   0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,
   0x36,0x36,0x36,0x36,0x36,0x37,0x30,0x37,
   0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,
   0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0xFF,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x36,0x36,0x36,0x36,0x36,0xF7,0x00,0xF7,
   0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,
   0x18,0x18,0x18,0x18,0x18,0xFF,0x00,0xFF,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x36,0x36,0x36,0x36,0x36,0x36,0x36,0xFF,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0xFF,
   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
   0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,
   0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x3F,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x18,0x18,0x18,0x18,0x18,0x1F,0x18,0x1F,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x1F,0x18,0x1F,
   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,
   0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,
   0x36,0x36,0x36,0x36,0x36,0x36,0x36,0xFF,
   0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,
   0x18,0x18,0x18,0x18,0x18,0xFF,0x18,0xFF,
   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,
   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xF8,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,
   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,
   0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,
   0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
   0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x76,0xDC,0xD8,0xD8,
   0xD8,0xD8,0xDC,0x76,0x00,0x00,0x00,0x00,
   0x00,0x00,0x78,0xCC,0xCC,0xD8,0xFC,0xC6,
   0xC6,0xC6,0xC6,0xCC,0x00,0x00,0x00,0x00,
   0x00,0x00,0xFE,0x66,0x62,0x60,0x60,0x60,
   0x60,0x60,0x60,0x60,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0xFE,0x6C,0x6C,
   0x6C,0x6C,0x6C,0x6C,0x00,0x00,0x00,0x00,
   0x00,0x00,0xFE,0xC6,0x62,0x30,0x18,0x18,
   0x30,0x62,0xC6,0xFE,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x7E,0xD8,0xCC,
   0xCC,0xCC,0xD8,0x70,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x66,0x66,0x66,0x66,
   0x66,0x7C,0x60,0xC0,0x80,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x76,0xDC,0x18,
   0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00,
   0x00,0x00,0xFE,0x38,0x38,0x6C,0xC6,0xC6,
   0x6C,0x38,0x38,0xFE,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x38,0x6C,0xC6,0xC6,0xFE,
   0xC6,0xC6,0x6C,0x38,0x00,0x00,0x00,0x00,
   0x00,0x00,0x38,0x6C,0xC6,0xC6,0xC6,0xC6,
   0x6C,0x6C,0x6C,0xEE,0x00,0x00,0x00,0x00,
   0x00,0x00,0x3E,0x60,0x60,0x3C,0x66,0xC6,
   0xC6,0xC6,0xCC,0x78,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x7E,0xDB,0xDB,
   0xDB,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x02,0x06,0x7C,0xCE,0xDE,0xF6,
   0xF6,0x7C,0x60,0xC0,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x1C,0x30,0x60,0x60,0x7C,
   0x60,0x60,0x30,0x1C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x7C,0xC6,0xC6,0xC6,0xC6,0xC6,
   0xC6,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0xFE,0x00,0x00,0xFE,
   0x00,0x00,0xFE,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x18,0x18,0x7E,0x18,
   0x18,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,
   0x00,0x00,0x30,0x18,0x0C,0x06,0x0C,0x18,
   0x30,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,
   0x00,0x00,0x0C,0x18,0x30,0x60,0x30,0x18,
   0x0C,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x0C,0x1E,0x1A,0x18,
   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,
   0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,
   0x18,0x18,0x58,0x78,0x30,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x7E,
   0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x76,0xDC,
   0x00,0x76,0xDC,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x78,0xCC,0xCC,0x78,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,
   0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x1F,0x18,0x18,0x18,0x18,0x18,
   0xD8,0xD8,0x78,0x38,0x18,0x00,0x00,0x00,
   0x00,0x00,0xD8,0x6C,0x6C,0x6C,0x6C,0x6C,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x70,0xD8,0x18,0x30,0x60,0xF8,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x7E,0x7E,0x7E,
   0x7E,0x7E,0x7E,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};